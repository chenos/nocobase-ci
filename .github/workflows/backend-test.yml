name: NocoBase pro backend test

concurrency:
  group: ${{ github.workflow }}-${{ inputs.branch }}-${{ inputs.nocobase_pr_number }}-${{ inputs.pro_repo }}-${{ inputs.pro_pr_number }}
  cancel-in-progress: true

run-name: ${{ inputs.branch }}-${{ inputs.nocobase_pr_number }}-${{ inputs.pro_repo }}-${{ inputs.pro_pr_number }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "base branch"
        required: true
      nocobase_pr_number:
        description: "main repo pr number"
      pro_repo:
        description: "pro repository name"
        default: "pro-plugins"
        required: true
      pro_pr_number:
        description: "pro repo pr number"
      checkRunId:
        description: "check run id"

jobs:
  update-in-progress:
    if: ${{ inputs.checkRunId }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.NOCOBASE_APP_ID }}
          private-key: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
          owner: nocobase
          repositories: nocobase,pro-plugins,${{ inputs.pro_repo }}
          skip-token-revoke: true
      - name: Update in_progress status
        run: |
          gh api -X PATCH /repos/nocobase/${{ inputs.pro_repo }}/check-runs/${{ inputs.checkRunId }} \
             -F 'status=in_progress' \
             -F 'details_url=https://github.com/chenos/nocobase-ci/actions/runs/${{ github.run_id }}'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
  get-plugins:
    uses: nocobase/nocobase/.github/workflows/get-plugins.yml@main
    secrets: 
      NOCOBASE_APP_PRIVATE_KEY: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
  backend-test:
    strategy:
      fail-fast: false
      matrix:
        node_version: ["20"]
        db:
          - dialect: sqlite
            host: localhost
            port: ""
          - dialect: mysql
            host: mysql
            port: 3306
            db_user: root
          - dialect: mariadb
            host: mariadb
            port: 3306
            db_user: root
          - dialect: postgres
            host: postgres
            port: 5432
            db_user: postgres
            db_schema: public
            collection_manager_schema: public
          - dialect: postgres
            host: postgres
            port: 5432
            db_user: postgres
            db_schema: nocobase
            collection_manager_schema: public
          - dialect: postgres
            host: postgres
            port: 5432
            db_user: postgres
            db_schema: public
            collection_manager_schema: user_schema
          - dialect: postgres
            host: postgres
            port: 5432
            db_user: postgres
            db_schema: nocobase
            collection_manager_schema: user_schema
        underscored: [true, false]
        include:
          - node_version: 20
            underscored: true
            db:
              dialect: postgres
              host: postgres
              port: 5432
              db_user: postgres
              cache_redis: redis://redis:6379/2
    runs-on: ubuntu-latest
    container: node:${{ matrix.node_version }}
    services:
      redis:
        image: redis/redis-stack-server:latest
        ports:
          - 6379:6379
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: nocobase
        options: --name=mysql --health-cmd="mysqladmin ping" --health-interval=20s --health-timeout=10s --health-retries=5
        volumes:
          - ${{ github.workspace }}/mysql:/etc/mysql/conf.d
      mariadb:
        image: mariadb:10.9
        env:
          MARIADB_ROOT_PASSWORD: password
          MARIADB_DATABASE: nocobase
        options: --name=mariadb --health-cmd="mysqladmin ping" --health-interval=20s --health-timeout=10s --health-retries=5
        volumes:
          - ${{ github.workspace }}/mariadb:/etc/mysql/conf.d
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: nocobase
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
    env:
      REMOTE_MYSQL_HOST: mysql
      REMOTE_MYSQL_PORT: 3306
      REMOTE_MYSQL_USER: root
      REMOTE_MYSQL_PASSWORD: password
      REMOTE_MYSQL_DB: nocobase

      REMOTE_MARIADB_HOST: mariadb
      REMOTE_MARIADB_PORT: 3306
      REMOTE_MARIADB_USER: root
      REMOTE_MARIADB_PASSWORD: password
      REMOTE_MARIADB_DB: nocobase

      REMOTE_POSTGRES_HOST: postgres
      REMOTE_POSTGRES_PORT: 5432
      REMOTE_POSTGRES_USER: postgres
      REMOTE_POSTGRES_PASSWORD: password
      REMOTE_POSTGRES_DB: nocobase

    steps:
      - name: Restart mysql
        if: ${{ matrix.db.dialect == 'mysql' }}
        uses: docker://docker
        with:
          args: docker restart mysql
      - name: Restart mariadb
        if: ${{ matrix.db.dialect == 'mariadb' }}
        uses: docker://docker
        with:
          args: docker restart mariadb
      - name: Get info
        id: get-info
        shell: bash
        run: |
          if [[ "${{ inputs.branch }}" == "next" ]]; then
            echo "proRepos=$(echo '${{ needs.get-plugins.outputs.beta-plugins }}')" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.branch }}" == "develop" ]]; then
            echo "proRepos=$(echo '${{ needs.get-plugins.outputs.alpha-plugins }}')" >> $GITHUB_OUTPUT
          else
            echo "proRepos=$(echo '${{ needs.get-plugins.outputs.rc-plugins }}')" >> $GITHUB_OUTPUT
          fi
          if [ -n "${{ inputs.pro_pr_number }}" ]; then
            if [[ "${{ inputs.pro_plugin }}" == "pro-plugins" ]]; then
              echo "imageTag=$(echo 'pr-${{ inputs.pro_pr_number }}-pro')" >> $GITHUB_OUTPUT
            else 
              echo "imageTag=$(echo 'pr-${{ inputs.pro_pr_number }}-${{ inputs.pro_plugin }}')" >> $GITHUB_OUTPUT
            fi
          elif [ -n "${{ inputs.nocobase_pr_number }}" ]; then
            echo "imageTag=$(echo 'pr-${{ inputs.nocobase_pr_number }}')" >> $GITHUB_OUTPUT
          else
            echo "imageTag=$(echo '${{ inputs.branch }}')" >> $GITHUB_OUTPUT
          fi
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.NOCOBASE_APP_ID }}
          private-key: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
          owner: nocobase
          repositories: nocobase,pro-plugins,${{ inputs.repository }},${{ join(fromJSON(needs.get-plugins.outputs.all-plugins), ',') }}
          skip-token-revoke: true
      - name: Update in_progress status
        if: ${{ inputs.checkRunId }}
        run: |
          gh api -X PATCH /repos/nocobase/${{ inputs.repository || 'nocobase' }}/check-runs/${{ inputs.checkRunId }} \
             -F 'status=in_progress' \
             -F 'details_url=https://github.com/2013xile/nocobase-ci/actions/runs/${{ github.run_id }}'
        env: 
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: nocobase/nocobase
          ref: ${{ inputs.branch }}
          token: ${{ steps.app-token.outputs.token }}
          submodules: true
      - name: Checkout nocobase/nocobase pr
        if: ${{ inputs.nocobase_pr_number != '' }}
        shell: bash
        run: |
          gh pr checkout ${{ inputs.nocobase_pr_number }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Get branch
        id: get-branch
        shell: bash
        run: |
            echo "baseBranch=$(git branch --show-current)" >> $GITHUB_OUTPUT
      - name: Checkout pro-plugins
        uses: actions/checkout@v3
        with:
          repository: nocobase/pro-plugins
          ref: ${{ inputs.branch }}
          path: packages/pro-plugins
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
      - name: Try checkout pro-plugins branch
        if: ${{ inputs.pro_pr_number == '' }}
        shell: bash
        continue-on-error: true
        run: |
          cd ./packages/pro-plugins/
          git checkout ${{ steps.get-branch.outputs.baseBranch }} || true
          cd ../../
      - name: Checkout pro-plugins pr
        if: ${{ inputs.repository == 'pro-plugins' && inputs.pro_pr_number != '' }}
        shell: bash
        run: |
          cd ./packages/pro-plugins/
          gh pr checkout ${{ inputs.pro_pr_number }}
          cd ../../
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Clone pro repos
        shell: bash
        run: |
          for repo in ${{ join(fromJSON(steps.get-info.outputs.proRepos), ' ') }}
          do
          git clone -b ${{ inputs.branch }} https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/nocobase/$repo.git packages/pro-plugins/@nocobase/$repo
          done
      - name: Clone pro repo
        shell: bash
        if: ${{ inputs.pro_plugin && inputs.pro_plugin != 'pro-plugins' }}
        run: |
          if [ ! -d "packages/pro-plugins/@nocobase/${{ inputs.repository }}" ]; then
            git clone -b ${{ inputs.branch }} https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/nocobase/${{ inputs.repository }}.git packages/pro-plugins/@nocobase/${{ inputs.repository }}
          fi
      - name: Try checkout pro repos branch
        shell: bash
        if: ${{ inputs.pro_pr_number == '' }}
        continue-on-error: true
        run: |
          for plugins in ./packages/pro-plugins/@nocobase/*; do
            echo "$plugins"
            cd "$plugins"
            git checkout ${{ steps.get-branch.outputs.baseBranch }} || true
            cd ../../../../
          done
      - name: Checkout pro pr
        if: ${{ inputs.pro_plugin && inputs.pro_plugin != 'pro-plugins' && inputs.pro_pr_number != '' }}
        shell: bash
        run: |
          cd ./packages/pro-plugins/@nocobase/${{ inputs.repository }}
          gh pr checkout ${{ inputs.pro_pr_number }}
          cd ../../../../
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: "yarn"
      - name: Install db clients
        run: |
          apt-get update
          apt-get install -y postgresql-client default-mysql-client
      - name: Install project dependencies
        run: yarn install
      - name: yarn add sqlite3
        if: ${{ matrix.db.dialect == 'sqlite' }}
        run: yarn add sqlite3 --no-save -W
      - name: Run test
        run: |
          yarn test --server packages/pro-plugins/@nocobase
        env:
          LOGGER_LEVEL: error
          ENCRYPTION_FIELD_KEY: "66036232662082160067048057423456"
          DB_DIALECT: ${{ matrix.db.dialect }}
          DB_HOST: ${{ matrix.db.host }}
          DB_PORT: ${{ matrix.db.port }}
          DB_STORAGE: /tmp/db.sqlite
          DB_USER: ${{ matrix.db.db_user }}
          DB_PASSWORD: password
          DB_DATABASE: nocobase
          DB_UNDERSCORED: ${{ matrix.underscored }}
          DB_SCHEMA: ${{ matrix.db.db_schema }}
          COLLECTION_MANAGER_SCHEMA: ${{ matrix.db.collection_manager_schema }}
          REDIS_URL: redis://redis:6379/0
          LOCK_ADAPTER_REDIS_URL: redis://redis:6379/0
          PUBSUB_ADAPTER_REDIS_URL: redis://redis:6379/1
          CACHE_REDIS_URL: ${{ matrix.db.cache_redis }}
          QUEUE_ADAPTER_REDIS_URL: redis://redis:6379/3
          QUEUE_ADAPTER_RABBITMQ_URL: amqp://rabbitmq:5672
  update-success:
    if: ${{ always() && inputs.checkRunId }}
    needs: backend-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.NOCOBASE_APP_ID }}
          private-key: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
          owner: nocobase
          repositories: nocobase,pro-plugins,${{ inputs.pro_repo }}
          skip-token-revoke: true
      - name: Update success status
        run: |
          gh api -X PATCH /repos/nocobase/${{ inputs.pro_repo }}/check-runs/${{ inputs.checkRunId }} \
             -F 'status=completed' \
             -F 'conclusion=${{ needs.backend-test.result }}' \
             -F 'details_url=https://github.com/chenos/nocobase-ci/actions/runs/${{ github.run_id }}'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
